{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>A custom mobile site built on the Salesforce platform. This is used for weekly game play results tracking by individual users. Tournament results and stats are updated to the site by the Admin, Omar Pastrana.</p> <p></p>"},{"location":"#what-the-site-does","title":"What the site does","text":"Elo-based LeaderboardMatch Result EntriesTournament Results <p>Players and avatars are set up by the Admin, Omar Pastrana, behind the scenes. Players begin with a <code>1200</code> Elo score and rankings are established using the Elo rating system. This system is commonly used in Chess and ESports.</p> <ul> <li>A player's Elo rating increases if they win games, and decreases if they lose. </li> <li>A player's Elo rating also increases if they beat a higher-ranked player. </li> </ul> <p></p> <p>The winning player enters their results on the Ranked Match tab. This adjusts the ratings for each player involved in the match. This can be found in the History section.</p> <p></p> <p>This tab highlights all the recent Tournament Results. This information can also be found on the Leaderboard Tab where it is specific to the player selected.</p> <ul> <li>Highlights which deck archetypes are most successful</li> <li>Helps plan for attendance at the next month's event</li> </ul> <p></p>"},{"location":"about-us/","title":"About Us","text":"<p>We are a North Texas based Pok\u00e9mon TCG team. We are both a social club and compete in local/regional events. We meet weekly to test new deck archetypes, prepare for our next big event or host our own mini tournaments.</p> <p></p>"},{"location":"about-us/#our-logo","title":"Our Logo","text":"<p>Designed by Omar and Maverick. We play on the name \"mechanics\" which describes a way the cards interact with the game, like an Ace in a game of Blackjack can either be 1 or 11. Comeback mechanics are found in many trading card games and are <code>known combinations or single cards that assist players to turn a game around</code>. Combining this name and its implied visuals with a \"punk rock\" feel of cute skull made the whole logo come together.</p> <p></p>"},{"location":"about-us/#founding-members","title":"Founding Members","text":"OmarMaverickChris <p>Fun Facts: </p> <ul> <li>been playing for 3 years</li> <li>also plays Lorcana</li> </ul> <p>Fun Facts: </p> <ul> <li>been playing for 6 years</li> <li>avid fan of Marvel Snap</li> </ul> <p>Fun Facts: </p> <ul> <li>been playing for 6 years</li> <li>Made Day 2 twice at Pokemon Regionals</li> </ul> <p></p>"},{"location":"about-us/#social-channels","title":"Social Channels","text":"<p> @comebackmechs</p> <p> @comebackmechs</p> <p></p> <p> One of our recently created videos showcasing our finals match from the last tournament.</p> <p></p>"},{"location":"code-documentation/","title":"Code Overview","text":"<p>Let's look at the functionality and code for each page</p> <p></p>"},{"location":"code-documentation/#flows","title":"Flows","text":""},{"location":"code-documentation/#player-creation-flow-cm_create_elo_rank","title":"Player Creation Flow <code>CM_Create_ELO_Rank</code>","text":"<ul> <li>Object: <code>CM_Players__c</code></li> <li>Trigger: A record is created</li> </ul> <p>Before a player appears on the leaderboard, they must be created in Salesforce by the Admin, Omar Pastrana. When the <code>CM_Players__c</code> record is created, the flow pulls in the Elo <code>Starting_Value__c</code> from the <code>CM_Setting__mdt</code>. This is used to create the first Elo Receipt record</p> <pre><code>graph LR\n  A[New Player Record] --&gt; B[Get Setting Value];\n  B --&gt; C[Create Elo Receipt];</code></pre> <p></p>"},{"location":"code-documentation/#lightning-web-components","title":"Lightning Web Components","text":""},{"location":"code-documentation/#wrapper-lwc","title":"Wrapper LWC","text":""},{"location":"code-documentation/#cmwrapper-getmodel","title":"<code>cmWrapper getModel</code>","text":"<p>This method is called in the <code>connectedCallback</code> method and pulls the necessary information from the database. Once the result is brought in, it is processed. Each child component inside will be given the correctly processed data.</p> <pre><code>getModel() {\n    this.loading = true;\n    getViewModel()\n        .then((result) =&gt; {\n            this.outboundModel = Object.assign({}, result.outboundModel);\n        })\n        .catch((error) =&gt; {\n            this.handleError(error);\n        })\n        .finally(() =&gt; {\n            this.allPlayers = this.buildAllPlayers(this.outboundModel.allPlayers);\n            this.allPlayerOptions = this.buildAllPlayerOptions(this.outboundModel.allPlayers);\n            this.allTagChallenges = this.buildAllTagChallenges(this.outboundModel.allTagChallenges);\n            this.metadataConstants = this.outboundModel.metadataConstants[0];\n\n            this.loading = false;\n            this.setNav(\"leaderboard\");\n        });\n}\n</code></pre> <p></p>"},{"location":"code-documentation/#cmwrapper-buildalltagchallenges","title":"<code>cmWrapper buildAllTagChallenges</code>","text":"<p>An example of the processing methods in the <code>getViewModel</code> where the data is dissected, new values created and all packaged for the next component. </p> <pre><code>buildAllTagChallenges(arr) {\n    let tempArray = [];\n    arr.forEach((row) =&gt; {\n        let tempObj = {};\n\n        tempObj.Id = row.Id;\n        tempObj.date = this.flipDate(row.CM_Date_of_Event__c);\n        tempObj.winner = row.CM_Winning_Player__r.Name;\n        tempObj.winnerId = row.CM_Winning_Player__c;\n        tempObj.winnersRank = row.CM_Winning_Player_s_New_Rank__c;\n        tempObj.winnerOrdinal = h.getRankNumber(row.CM_Winning_Player_s_New_Rank__c);\n        tempObj.loser = row.CM_Losing_Player__r.Name;\n        tempObj.loserId = row.CM_Losing_Player__c;\n        tempObj.losersRank = row.CM_Losing_Player_s_New_Rank__c;\n        tempObj.loserOrdinal = h.getRankNumber(row.CM_Losing_Player_s_New_Rank__c);\n        tempObj.CM_Defended_Tag__c = row.CM_Defended_Tag__c;\n\n        //Elo strings\n        tempObj.winnerEloString = `${row.CM_Winning_Player_s_Previous_Elo__c} (+${row.CM_Winning_Players_Elo_Change__c})`;\n        tempObj.loserEloString = `${row.CM_Losing_Player_s_Previous_Elo__c} (${row.CM_Losing_Players_Elo_Change__c})`;\n\n        tempArray.push(tempObj);\n    });\n    return tempArray;\n}\n</code></pre> <p></p>"},{"location":"code-documentation/#tag-challenge-lwc","title":"Tag Challenge LWC","text":""},{"location":"code-documentation/#cmtagchallenge-handlesubmitclick","title":"<code>cmTagChallenge handleSubmitClick</code>","text":"<p>As the user interacts with the inputs of the UI, the values are updated to the <code>tagRecordWrapper</code> variable so it can be passed into the <code>createTagChallenge</code> apex implicit call. Once the call is complete, the UI is refreshed by calling <code>refreshScores</code> and sending the custom event up to the parent component <code>cmWrapper</code>.</p> <pre><code>handleSubmitClick() {\n    this.deactivateSubmit = true;\n    this.loading = true;\n    this.checkRanksForPlayers();\n    let expectedValues = this.calculateExpected(\n      this.tagRecordWrapper.CM_Winning_Player_s_Previous_Elo__c,\n      this.tagRecordWrapper.CM_Losing_Player_s_Previous_Elo__c\n    );\n    this.tagRecordWrapper.CM_Winning_Players_Elo_Change__c = this.calculateEloChange(1, expectedValues.winner);\n    this.tagRecordWrapper.CM_Losing_Players_Elo_Change__c = this.calculateEloChange(0, expectedValues.loser);\n\n    this.receipt.winningPlayerId = this.tagRecordWrapper.CM_Winning_Player__c;\n    this.receipt.winningPlayerEloChange = this.tagRecordWrapper.CM_Winning_Players_Elo_Change__c;\n    this.receipt.losingPlayerId = this.tagRecordWrapper.CM_Losing_Player__c;\n    this.receipt.losingPlayerEloChange = this.tagRecordWrapper.CM_Losing_Players_Elo_Change__c;\n\n    createTagChallenge({ tc: this.tagRecordWrapper, r: this.receipt })\n        .then((result) =&gt; {\n            this.message = result;\n            this.error = undefined;\n            this.scoreSubmitted = true;\n        })\n        .catch((error) =&gt; {\n            this.message = undefined;\n            this.error = error;\n            this.errorSubmitting = true;\n        })\n        .finally(() =&gt; {\n            this.refreshScores();\n        });\n}\n</code></pre> <p></p>"},{"location":"code-documentation/#apex-classes","title":"Apex Classes","text":""},{"location":"code-documentation/#controller-class","title":"Controller Class","text":""},{"location":"code-documentation/#cm_controllercreatetagchallenge","title":"<code>CM_Controller.createTagChallenge</code>","text":"<p>This method is invoked by the LWC at the time of Match Result creation. The LWC provides the necessary properties after the player inputs them into the component. Then end result is 1 <code>CM_Tag_Challenge__c</code> record and 2 <code>CM_Elo_Receipt__c</code> records, one for each player involved.</p> <pre><code>@AuraEnabled\npublic static CM_Tag_Challenge__c createTagChallenge(CM_Tag_Challenge__c tc, Receipt r) {\n    if (tc != null) {\n      insert tc;\n    }\n    List&lt;CM_Elo_Receipt__c&gt; receipts = new List&lt;CM_Elo_Receipt__c&gt;();\n\n    //? insert Player A ELO receipt\n    CM_Elo_Receipt__c winnerEloReceipt = new CM_Elo_Receipt__c();\n    winnerEloReceipt.CM_ELO_Change__c = r.winningPlayerEloChange;\n    winnerEloReceipt.CM_Player__c = r.winningPlayerId;\n    winnerEloReceipt.CM_Tag_Challenge__c = tc.Id;\n    receipts.add(winnerEloReceipt);\n\n    //? insert Player B ELO receipt\n    CM_Elo_Receipt__c loserEloReceipt = new CM_Elo_Receipt__c();\n    loserEloReceipt.CM_ELO_Change__c = r.losingPlayerEloChange;\n    loserEloReceipt.CM_Player__c = r.losingPlayerId;\n    loserEloReceipt.CM_Tag_Challenge__c = tc.Id;\n    receipts.add(loserEloReceipt);\n\n    insert receipts;\n    return tc;\n}\n</code></pre> <p></p>"},{"location":"code-documentation/#cm_controllergetviewmodel","title":"<code>CM_Controller.getViewModel</code>","text":"<p>This method passes all the needed information from the database to the frontend LWC. This is accomplished by using a ViewModel pattern. All data is retrieved, bundled and sent to the LWC by using this one method.</p> <pre><code>@AuraEnabled\npublic static ViewModel getViewModel() {\n    ViewModel vm = new ViewModel();\n    vm.outboundModel = new OutboundViewModel();\n    return vm;\n}\n\npublic class ViewModel {\n    @AuraEnabled\n    public OutboundViewModel outboundModel;\n}\n\n//? data coming out of the database\npublic class OutboundViewModel {\n    @AuraEnabled\n    public List&lt;CM_Tournament_Result__c&gt; allTournamentResults;\n\n    @AuraEnabled\n    public List&lt;CM_Players__c&gt; allPlayers;\n\n    @AuraEnabled\n    public List&lt;CM_Tag_Challenge__c&gt; allTagChallenges;\n\n    @AuraEnabled\n    public List&lt;CM_Settings__mdt&gt; metadataConstants;\n\n    public OutboundViewModel() {\n      this.allTournamentResults = getAllTournamentResults();\n      this.allPlayers = getAllPlayers();\n      this.allTagChallenges = getAllTagChallenges();\n      this.metadataConstants = getMetadataConstants();\n    }\n}\n</code></pre> <p></p>"},{"location":"data-schema/","title":"Data Schema Overview","text":""},{"location":"data-schema/#object-descriptions","title":"Object Descriptions","text":"<p>How do all these custom objects interact with each other?</p> Label API Name Description Player <code>CM_Players__c</code> Main object used to collect the data from the other objects. Uses roll-up summaries to gather essential information from other objects Elo Receipt <code>CM_Elo_Receipt__c</code> These are created to track the ups and downs associated with the player rankings. Each Tag Challenge creates one for each player. Tag Challenge <code>CM_Tag_Challenge__c</code> These are created by the players thru the mobile site. Once created, an associated Elo Receipt is made for each player to track their Elo change. Tournament Result <code>CM_Tournament_Result__c</code> Junction Object that connects the Player to the Tournament. This allows for cross object relationships. Tournament <code>CM_Tournament__c</code> Created on the backend by the Admin to later associate with Tournament Results. Setting <code>CM_Setting__mdt</code> This record, named \"Default\", holds information for how the application should be run. Ex: Elo Starting Value <p> </p>"},{"location":"data-schema/#schema-relationship-diagram","title":"Schema Relationship Diagram","text":"<pre><code>classDiagram\n    class Player{\n        Active - Boolean\n        Avatar File - Text\n        Elo Rank (Roll-up Summary) Sum\n        Elo Slip Count (Roll-up Summary) Count\n    }\n    Player &lt;|-- Elo_Receipt\n    Player &lt;|-- Tag_Challenge\n    Player &lt;|-- Tournament_Result\n    class Elo_Receipt{\n        Elo_Change - Number\n        Player (Lookup) Player\n        Challenge (Lookup) Tag_Challenge\n    }\n    Elo_Receipt &lt;|-- Tag_Challenge\n    class Tag_Challenge{\n        Winning Player (Lookup) Player\n        Winning Player Previous Elo - Number\n        Winning Player Elo Change - Elo_Receipt\n        Losing Player (Lookup) Player\n        Losing Player Previous Elo - Number\n        Losing Player Elo Change - Elo_Receipt\n    }\n    Tournament &lt;|-- Tournament_Result\n    class Tournament_Result{\n        Date of Event - Date\n        Deck Type - Picklist\n        Record - Text\n        Player(MasterDetail) Player\n        Tournament(Lookup) Tournament\n    }\n    class Tournament{\n        Name - Text\n        Location - Text\n        Type - Picklist\n        Date of Event - Date\n    }</code></pre>"}]}